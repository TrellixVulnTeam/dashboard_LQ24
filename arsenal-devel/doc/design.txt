                          --== The Arsenal ==--

Concept
=======
The Arsenal is an auxillary site / toolset for interacting with
Launchpad, wrapped up as a unified, open source web application.

The central idea is to provide information and tools beyond what
Launchpad provides, both to simplify tasks and to make usage much more
powerful than can be done with Launchpad alone.

The Arsenal is not intended to be a replacement for Launchpad - indeed
it's completely dependent on Launchpad!  However, the hope is that until
Launchpad is open sourced, it gives us a way to collaborate on extending
it in Open Source style.

Most components available in the site fall into one of two categories:
Reports, and Tools.  Reports are typically tabular listings, such as
specialized searches.  Tools are mechanisms for performing actions
against Launchpad, such as filing Main Inclusion Requests, placing Sync
Requests, etc.

Reports are available publically to any visitor.  Tools typically
require performing some action as a logged-in launchpad user, and thus
as a result Tools can only be made to a subset of users.  As a general
rule, if you contribute non-trivial code additions, you'll be given
access for the Tools.


Architecture
============
Arsenal is three discrete parts:

  a) backend engine - package builder and launchpad data extractor
  b) web interface - html generated from templates using json files
  d) browser overlay - greasemonkey scripts to integrate with LP

Data obtained from Launchpad is stored in plain JSON text files in a
unified file system.  Data is also summarized into aggregate files to
make it easier to generate reports.  These raw data files are also made
visible from the website in case people wish to reuse them for other
purposes.

While we collect data at the source package level, we know that most
people care about more than just a single package.  Thus an important
part of our architecture is the assumption of "package groups".  For
instance, the Ubuntu-X package group consists of all X.org related
packages including X drivers, the X server, X11 libraries, and so on.
These are grouped by launchpad teams.

Pages can be generated either statically (esp. graphs) or dynamically
with CGI.  It is expected that most if not all of the site will be
statically generated.

Rather than fill crontab with a mess of entries, static jobs (crawlers
and page generators) are marshalled by a single central process,
which simply kicks off each script in turn.  Dynamic jobs, obviously,
are triggered by web visits.


Launchpad Data Extraction
=========================
The central process periodically runs scripts to extract data from
launchpad, doing appropriate processing or grouping, and generating JSON
files accordingly.

 https://launchpad.net/ubuntu/+bugs-text
 https://launchpad.net/bugs/$bug/+text
 http://blop.info/pub/lpbugs/createdb.py
 http://blop.info/pub/lpbugs/launchpad-sucker.py


Page Layout
===========
The website's page layout will derive its look and feel from Launchpad
in order to make it feel somewhat seamless with it.

Across the top of the page is a location bar and user login info.  This
will be organized by 'Project', 'Group', 'Package', and 'Item'.

The main banner will report the page title, and a sequence of tabs for
accessing different portions of the web app.

Down the left-hand side of the page will be detail boxes.  These could
include 'Action lists', 'Canned Filters', and so on.

For page generation, TemplateToolkit will be used.


Launchpad Overlay
=================
To ease integration with Launchpad, greasemonkey scripts will be
provided which overlays Arsenal on top of the Launchpad interface.

This adds in Arsenal links at appropriate places throughout the Launchpad
interface, so that for instance you can display alternate reports when
looking at milestones, or invoke particular Tools in relation to a given
bug report, component, etc.  It adds in links to Action boxes to enable
extra functionality (like to start filing a bug upstream, or to see
links of pre-built packages, or to request a build be made that includes
a particular patch, or to add personal notes about a given bug report.)


