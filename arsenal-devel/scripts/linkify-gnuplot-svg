#!/usr/bin/env python

import os
import sys
import os.path
import string
from optparse import OptionParser
from lxml import etree
import simplejson as json

from lpltk import LaunchpadService

lp          = LaunchpadService(config={'read_only':True})
d           = lp.launchpad.distributions["ubuntu"]

def upstream_product(source_pkg):
    s = d.getSourcePackage(name = source_pkg)
    if s and s.upstream_product:
        return str(s.upstream_product.name)
    return None

def loadfile(filename):
    in_file = open(filename, "r")
    text = in_file.read()
    in_file.close()
    return text

def main():
    XLINK = '{http://www.w3.org/1999/xlink}'

    usage = '''
    %prog [options] <svg-file>
    '''
    parser = OptionParser(usage=usage)
    parser.add_option( "--series", action="store", dest="series",
                       help="The ubuntu release name to limit display to")
    parser.add_option( "--current", action="store", dest="current_datafile",
                       help="A JSON formatted file with current bug statistic data")
    (options, args) = parser.parse_args()

    if len(args) < 1:
        parser.print_help()
        sys.exit(1)
    filename = args[0]

    tags_string = ""
    if options.series:
        tags_string += "%s+" %(options.series)
    tags_string += "-kubuntu+-xubuntu+-ppc+-omit"

    current_data = { }
    if (options.current_datafile and
        not os.path.isdir(options.current_datafile)):
        text = loadfile(options.current_datafile)
        if text:
            try:
                results = json.loads(text)
            except:
                sys.stderr.write("JSON Error parsing %s" %(options.current_datafile))
                raise
            for result in results['data']:
                key = result.keys()[0]
                current_data[key] = result[key]

    tree = etree.parse(filename)
    root = tree.getroot()

    elements = root.xpath('//svg:a', namespaces={'svg':'http://www.w3.org/2000/svg'})

    for e in elements:
        pkg = e[0][0][0].text

        tot = 0
        if (pkg in current_data):
            for field_part in ['-new', '-responded', '-confirmed', '-triaged']:
                field = options.series+field_part
                if field in current_data[pkg]:
                    tot += current_data[pkg][field]

            # TODO: Don't exclude upstream bugs - it excludes bugs in any
            #       upstream, whereas we really only want to exclude bugs.freedesktop.org
            #
            ## Exclude bugs that are open upstream
            #for field_part in ['-open-upstream']:
            #    field = options.series+field_part
            #    if field in current_data[pkg]:
            #        tot -= current_data[pkg][field]

        field_status = ""
        for status in ["NEW", "INCOMPLETE_WITH_RESPONSE", "CONFIRMED", "TRIAGED", "INPROGRESS"]:
            field_status += "field.status:list=%s&" %(status)

        upstream_pkg = upstream_product(pkg)
        if upstream_pkg:
            for upstream_status in ["pending_bugwatch", "hide_upstream", "resolved_upstream"]:
                field_status += "field.status_upstream=%s&" %(upstream_status)
            field_status += "field.status_upstream-empty-marker=1&"
            field_status += "field.upstream_target=%s&" %(upstream_pkg)
        package_bug_link = "%s/ubuntu/+source/%s?%sfield.tag=%s&field.tags_combinator=ALL" %(
            "http://bugs.launchpad.net",
            pkg,
            field_status,
            tags_string)
        e.set(XLINK + "href", package_bug_link)
        e.set(XLINK + "title", "%s (%d)" %(pkg, tot))

        pkg = pkg.replace("nvidia-graphics-drivers", "nvidia")
        pkg = pkg.replace("xserver-xorg-video-", "-")
        pkg = pkg.replace("xserver-xorg-input-", "-")
        pkg = pkg.replace("xf86-input-", "-")

        if tot > 0:
            e[0][0][0].text = "%s . . %d" %(pkg, tot)
        else:
            e[0][0][0].text = "%s . . --" %(pkg)

    print etree.tostring(tree.getroot(), pretty_print=True, xml_declaration=True, encoding='utf-8')

main()
