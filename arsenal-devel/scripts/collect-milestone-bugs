#!/usr/bin/python

# Retrieve bugs targeted to milestones

import simplejson as json
import datetime
import socket
from optparse import OptionParser
from arsenal.arsenal_lib import *
from lpltk import LaunchpadService
from xml.etree.ElementTree import ParseError

# TODO:  If no source_package specified, apply to all packages

usage = '''
%prog [OPTIONS] <source-package> [source-package ...]
'''
parser = OptionParser(usage=usage)
parser.add_option(
    '-d', '--debug',
    action='store_true', dest='DEBUG', default=False,
    help='Enable debugging output')
(options, args) = parser.parse_args()

if len(args) < 1:
    parser.print_help()
    sys.exit(1)

source_pkgs = args
records = []

try:
    lp          = LaunchpadService(config={'read_only':True})
except:
    sys.exit(7)

try:

    d = lp.launchpad.distributions["ubuntu"]
    for source_pkg in source_pkgs:
        try:
            s = d.getSourcePackage(name = source_pkg)
        except:
            sys.stderr.write("Error: Could not load package %s\n" %(source_pkg))
            continue

        # Nominations
        for bugtask in s.searchTasks(nominated_for = d.current_series):
            bug = ArsenalBug(bugtask.bug, lp.launchpad)
            if bug.ubuntu_omittable():
                continue

            bugtask_dict = bugtask_as_dict(bug, bugtask)
            if bugtask.milestone:
                bugtask_dict['milestone'] = bugtask.milestone.name
            else:
                bugtask_dict['milestone'] = d.current_series.name
            records.append(bugtask_dict)

        # Milestones
        for m in d.active_milestones:
            for bugtask in s.searchTasks(milestone = m):
                bug = ArsenalBug(bugtask.bug, lp.launchpad)
                if bug.ubuntu_omittable():
                    continue

                bugtask_dict = bugtask_as_dict(bug, bugtask)
                bugtask_dict['milestone'] = m.title
                records.append(bugtask_dict)

except HTTPError as e:
    if is_launchpad_down(e):
        sys.exit(7)
    else:
        sys.stderr.write("HTTPError Exception encountered: %s\n" %(e))
        raise

except ParseError as e:
    sys.stderr.write("ParseError reading JSON from Launchpad.  Cache corruption?\n")
    sys.stderr.write(" + Try clearing lpltk cache\n")
    sys.exit(8)

except socket.error as e:
    # Network is down.  Skip for now
    sys.exit(7)

keys = ['milestone', 'nomination', 'id', 'title', 'assignee', 'status', 'importance', 'last_message_age']
print json.dumps({'keys':keys,
                  'bug_tasks':records,
                  'timestamp-stop':str(datetime.datetime.now())
                  }, indent=4)
