#!/usr/bin/env python

import sys, os.path
sys.path.insert(0, os.path.realpath(
        os.path.join(os.path.dirname(__file__), "..")))

from sys                                import argv, stdout, exit
from getopt                             import getopt, GetoptError
from datetime                           import datetime
import json

from arsenal.dbg                        import Dbg
from arsenal.utils                      import stdo, error, json_load, file_load, FileDoesntExist, date_to_string, string_to_date
from arsenal.cfg                        import Cfg, CfgError

from mako.template                      import Template, exceptions

# CmdlineError
#
# The type of exception that will be raised by Cmdline.process() if there
# are command line processing errors.
#
class CmdlineError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# Cmdline
#
class Cmdline:
    """
    Handle all the command line processing for the application.
    """
    # error
    #
    def error(self, e, defaults):
        """
        Simple helper which prints out an error message and then prints out the usage.
        """
        if e != '': error("%s\n" % e)
        self.usage(defaults)

    # usage
    #
    def usage(self, defaults):
        """
        Prints out the help text which explains the command line options.
        """
        stdo('    Usage:                                                                                   \n')
        stdo('        %s [Options] --title=<title-string> --template=<template-file> <data-file>           \n' % defaults['app_name'])
        stdo('                                                                                             \n')
        stdo('    Options:                                                                                 \n')
        stdo('        --help           Prints this text.                                                   \n')
        stdo('                                                                                             \n')
        stdo('        --debug=<debug options>                                                              \n')
        stdo('                         Performs additional output related to the option enabled and        \n')
        stdo('                         the application defined support for the option.                     \n')
        stdo('                                                                                             \n')
        stdo('                         Recognized debug options:                                           \n')
        stdo('                             enter                                                           \n')
        stdo('                             leave                                                           \n')
        stdo('                             verbose                                                         \n')
        stdo('                             cfg                                                             \n')
        stdo('                                                                                             \n')
        stdo('        --team=<team-name>                                                                   \n')
        stdo('                         Only use the bug data for the specified team when generating        \n')
        stdo('                         the report.                                                         \n')
        stdo('                                                                                             \n')
        stdo('    Examples:                                                                                \n')
        stdo('        %s --title="Bugs" --template=bug-template.mako bug-data.json                         \n' % defaults['app_name'])
        stdo('        %s --debug="enter,leave,verbose"                                                     \n' % defaults['app_name'])

    # process
    #
    def process(self, argv, defaults):
        """
        This method is responsible for calling the getopt function to process the command
        line. All parameters are processed into class variables for use by other methods.
        """
        result = True
        try:
            cfg = defaults
            optsShort = ''
            optsLong  = ['help', 'debug=', 'template=', 'title=', 'team=']
            opts, args = getopt(argv[1:], optsShort, optsLong)

            for opt, val in opts:
                if (opt == '--help'):
                    raise CmdlineError('')

                elif opt in ('--debug'):
                    cfg['debug'] = val.split(',')
                    for level in cfg['debug']:
                        if level not in Dbg.levels:
                            Dbg.levels.append(level)

                elif opt in ('--template'):
                    cfg['template'] = val

                elif opt in ('--team'):
                    cfg['team'] = val.strip()

                elif opt in ('--title'):
                    cfg['title'] = val

            if result: # No errors yet
                # There might be some bugs listed on the command line.
                #
                if len(args) > 0:
                    cfg['json_file'] = args

        except GetoptError, error:
            raise CmdlineError(error)

        # Verify we have all the command line options that are required.
        #
        if 'template' not in cfg:
            raise CmdlineError("--template is a required, command line parameter\n")

        if 'title' not in cfg:
            raise CmdlineError("--title is a required, command line parameter\n")

        if 'json_file' not in cfg:
            raise CmdlineError("A single json data file must be specified.\n")

        if len(cfg['json_file']) > 1:
            raise CmdlineError("A single json data file must be specified.\n")

        cfg['json_file'] = cfg['json_file'][0]

        return cfg


# Exit
#
class Exit():
    """
    If an error message has already been displayed and we want to just exit the app, this
    exception is raised.
    """
    pass

# Reporter
#
class Reporter():
    """
    Load a json file and a mako html template file, pass the resulting python object to
    the mako template renderer. This is a general class that can take any json file and
    any mako template file and produce an html file. The template file is, of course,
    specific to the json data.
    """

    # __init__
    #
    def __init__(self, cfg):
        Dbg.enter("Reporter.__init__")

        self.cfg    = cfg
        self.importance_color = {
                "Unknown"       : "importance-unknown",
                "Critical"      : "importance-critical",
                "High"          : "importance-high",
                "Medium"        : "importance-medium",
                "Low"           : "importance-low",
                "Wishlist"      : "importance-wishlist",
                "Undecided"     : "importance-undecided"
            }
        self.status_color     = {
                "New"           : "status-new",
                "Incomplete"    : "status-incomplete",
                "Confirmed"     : "status-confirmed",
                "Triaged"       : "status-triaged",
                "In Progress"   : "status-in_progress",
                "Fix Committed" : "status-fix_committed",
                "Fix Released"  : "status-fix_released",
                "Invalid"       : "status-invalid",
                "Won't Fix"     : "status-wont_fix",
                "Opinion"       : "status-opinion",
                "Expired"       : "status-expired",
                "Unknown"       : "status-unknown"
            }

        Dbg.leave("Reporter.__init__")

    # initialize
    #
    def initialize(self):
        """
        A separate initialize that we can control when it gets called (not
        when the object is instantiated).
        """
        Dbg.enter("Reporter.initialize")

        try:
            # Process the command line arguments, and any configuration file options. Make sure
            # that any required parameters have been provided.
            #
            self.cfg = Cfg.merge_options(defaults, self.cfg)

            self.template_data = json_load(self.cfg['json_file'])
            self.mako_template = Template(file_load(self.cfg['template']))

        except KeyboardInterrupt:
            Dbg.leave("Reporter.initialize")
            raise Exit()

        except CfgError as e:
            error(e)
            Dbg.leave("Reporter.initialize")
            raise Exit()

        except FileDoesntExist as e:
            e.print_std_error()
            raise Exit()

        Dbg.leave("Reporter.initialize")
        return


    def days_from_now(self, date, now):
        retval = 0
        now = now.replace(tzinfo=None)
        delta = now - date.replace(tzinfo=None)

        if delta.days >= 1:
            retval = delta.days

        return retval

    def minimal_bug_data(self, bd):
        mbd = {} # minimal bug data
        assignees = []
        tags = []
        tags_per_bug = {}
        now = datetime.utcnow()
        now.replace(tzinfo=None)

        for bid in bd['tasks']:
            bug = []
            for bug_task in bd['tasks'][bid]:
                task = {}
                task['bug'] = {}

                bug_tags = bug_task['bug']['tags']
                relevant_tags = [['untagged'] if bug_tags == [] else bug_tags]
                for this_tag in relevant_tags[0]:
                    if this_tag not in tags:
                        tags.append(this_tag)


                for k in ['title', 'series_name', 'number_of_messages',
                    'number_subscribed', 'number_affected', 'iso_date_created',
                    'last_update', 'series_version', 'number_of_duplicates',
                    'latest_patch_uploaded', 'linked_branches', 'web_link',
                    'tags']:
                    # in the event that a key doesn't exist in the json file
                    # set it to ''
                    try:
                        task['bug'][k] = bug_task['bug'][k]
                    except KeyError:
                        task['bug'][k] = ''
                for k in ['importance', 'status', 'assignee', 'team',
                          'bug_target_name', 'milestone_found',
                          'milestone_target', 'owner']:
                    task[k] = bug_task[k]


                if task['team'] == []:
                    task['team'].append('unknown')

                nominations = ''
                noms = bug_task['bug']['nominations']
                noms.sort()
                noms.reverse()
                for n in noms:
                    if nominations != '':
                        nominations += ', '
                    nominations += n.title()[0]
                task['nominations'] = nominations

                age = self.days_from_now(string_to_date(bug_task['date_created']), now)
                task['bug']['age'] = age
                last_update = self.days_from_now(string_to_date(bug_task['bug']['date_last_updated']), now)
                task['bug']['last_update'] = last_update
                bug.append(task)

                assignee = bug_task['assignee']
                if assignee not in assignees:
                    assignees.append(assignee)

                task['task_name'] = task['bug_target_name'].replace('(Ubuntu Oneiric)', '').strip()

            mbd[bid] = bug

        return mbd, sorted(assignees), sorted(tags)

    # main
    #
    def main(self):
        Dbg.enter("Reporter.main")
        retval = -1

        try:
            self.initialize()

            for bid in self.template_data['tasks']:
                task_tags = self.template_data['tasks'][bid][0]['bug']['tags']
                if task_tags == []:
                    self.template_data['tasks'][bid][0]['bug']['tags'] = ['untagged']

            if self.cfg['team'] != '':
                # Trim the bug data down to just the bugs for the specified team.
                #
                for bid in self.template_data['tasks']:
                    task_list = self.template_data['tasks'][bid]
                    neo_task_list = []
                    for task in task_list:
                        if task['team'] == self.cfg['team']:
                            neo_task_list.append(task)
                    self.template_data['tasks'][bid] = neo_task_list

            try:
                mbd, assignees, tags = self.minimal_bug_data(self.template_data)
                stdout.write(self.mako_template.render(report_title = self.cfg['title'],
                                                       template_data = self.template_data,
                                                       timestamp = date_to_string(datetime.utcnow()),
                                                       json_data_string = json.dumps(mbd, sort_keys=True, indent=4),
                                                       assignees_list = assignees,
                                                       tags_list = tags))
                retval = 0
            except:
                print exceptions.text_error_template().render()

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        except Exit:
            pass

        Dbg.leave("Reporter.main")
        return retval


if __name__ == '__main__':
    defaults = {}
    defaults['app_name'] = argv[0]
    defaults['team'] = ''

    # The cmdline processing is done here partially so the debug options
    # can be processed right away.
    #
    cmdline = Cmdline()
    try:
        app = Reporter(cmdline.process(argv, defaults))
        exit(app.main())
    except CmdlineError as e:
        cmdline.error(e.msg, defaults)

# vi:set ts=4 sw=4 expandtab:

