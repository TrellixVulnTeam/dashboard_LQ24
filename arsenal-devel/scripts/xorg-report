#!/usr/bin/perl -w
#
# Copyright (C) 2008  Bryce W. Harrington <bryce@canonical.com>
#
# Released under GNU GPL, read the file 'COPYING' for more information

use strict;
use LWP::Simple;
use Date::Manip;
use Template;

# TODO:  Determine the current development release automatically
my $release = 'jaunty';

my %Color = ("grey"   => '#888888',
             "green"  => '#98fc66',
             "yellow" => '#ffff00',
             "orange" => '#fb8b00',
             "red"    => '#fd3301',
             );
my @Ranks = ("grey", "green", "yellow", "orange", "red");
my @Reports =
    (
     {
         'heading'  => "Summary",
     },

     {
         'metric'  => "Release Status",
         'url'     => "https://launchpad.net/ubuntu/[[release]]",
         'split'   => '<tr',
         'regex'   => 'Status:</th>\s*<td>(.*)</td>',
         'test'    => { 'green' => '^Active Development$', 'red' => '.+' },
     },

     {
         'heading'  => "Bugs",
     },

     {
         'metric'  => "Total Xorg Bugs",
         'url'     => "https://bugs.launchpad.net/~ubuntu-x-swat/+packagebugs",
         'split'   => '<tr',
         'regex'   => 'Totals[^\d]*(\d+)',
         'test'    => { 'green' => 100, 'yellow' => 1000, 'orange' => 1500, 'red' => '\d+' },
     },

     {
         'metric'  => "High and Critical Release Targeted Bugs",
         'url'     => "https://bugs.launchpad.net/ubuntu/[[release]]/+bugs?field.searchtext=&orderby=-importance&search=Search&field.importance%3Alist=CRITICAL&field.importance%3Alist=HIGH",
         'split'   => '<tr',
         'regex'   => '<td>(.*)</td>',
         'filter'  => 'matching-packages',
         'test'    => { 'green' => '^[^1-9]', 'yellow' => 1, 'orange' => 3, 'red' => '\d+' },
     },

     # TODO:  Determine milestones automatically
     # Parse https://bugs.launchpad.net/ubuntu/+bugs?advanced=1 for Target Milestone
     # Pick out the value="" bits and the label
     # Omit -updates.  Include later(?)
     {
         'metric'  => "Milestoned Bugs (Hardy 8.04.1)",
         'url'     => "https://bugs.launchpad.net/ubuntu/+bugs?field.milestone%3Alist=1264",
         'split'   => '<tr',
         'regex'   => '<td>([a-zA-Z].*)</td>',
         'filter'  => 'matching-packages',
         'test'    => { 'green' => '^[^1-9]', 'yellow' => 5, 'orange' => 50, 'red' => '\d+' },
     },

     {
         'metric'  => "Milestoned Bugs (Jaunty Alpha 1)",
         'url'     => "https://bugs.launchpad.net/ubuntu/+bugs?field.milestone%3Alist=1319",
         'split'   => '<tr',
         'regex'   => '<td>([a-zA-Z].*)</td>',
         'filter'  => 'matching-packages',
         'test'    => { 'green' => '^[^1-9]', 'yellow' => 5, 'orange' => 50, 'red' => '\d+' },
     },

     {
         'metric'  => "Milestoned Bugs (Jaunty Alpha 2)",
         'url'     => "https://bugs.launchpad.net/ubuntu/+bugs?field.milestone%3Alist=1320",
         'split'   => '<tr',
         'regex'   => '<td>([a-zA-Z].*)</td>',
         'filter'  => 'matching-packages',
         'test'    => { 'green' => '^[^1-9]', 'yellow' => 5, 'orange' => 50, 'red' => '\d+' },
     },

     {
         'metric'  => "Milestoned Bugs (Jaunty Alpha 3)",
         'url'     => "https://bugs.launchpad.net/ubuntu/+bugs?field.milestone%3Alist=1321",
         'split'   => '<tr',
         'regex'   => '<td>([a-zA-Z].*)</td>',
         'filter'  => 'matching-packages',
         'test'    => { 'green' => '^[^1-9]', 'yellow' => 5, 'orange' => 50, 'red' => '\d+' },
     },

     {
         'metric'  => "Milestoned Bugs (Jaunty Alpha 4)",
         'url'     => "https://bugs.launchpad.net/ubuntu/+bugs?field.milestone%3Alist=1322",
         'split'   => '<tr',
         'regex'   => '<td>([a-zA-Z].*)</td>',
         'filter'  => 'matching-packages',
         'test'    => { 'green' => '^[^1-9]', 'yellow' => 5, 'orange' => 50, 'red' => '\d+' },
     },

     {
         'metric'  => "Milestoned Bugs (Jaunty Alpha 5)",
         'url'     => "https://bugs.launchpad.net/ubuntu/+bugs?field.milestone%3Alist=1323",
         'split'   => '<tr',
         'regex'   => '<td>([a-zA-Z].*)</td>',
         'filter'  => 'matching-packages',
         'test'    => { 'green' => '^[^1-9]', 'yellow' => 5, 'orange' => 50, 'red' => '\d+' },
     },

     {
         'metric'  => "Milestoned Bugs (Jaunty Alpha 6)",
         'url'     => "https://bugs.launchpad.net/ubuntu/+bugs?field.milestone%3Alist=1324",
         'split'   => '<tr',
         'regex'   => '<td>([a-zA-Z].*)</td>',
         'filter'  => 'matching-packages',
         'test'    => { 'green' => '^[^1-9]', 'yellow' => 5, 'orange' => 50, 'red' => '\d+' },
     },

     {
         'metric'  => "Milestoned Bugs (8.10-beta)",
         'url'     => "https://bugs.launchpad.net/ubuntu/+bugs?field.milestone%3Alist=1325",
         'split'   => '<tr',
         'regex'   => '<td>([a-zA-Z].*)</td>',
         'filter'  => 'matching-packages',
         'test'    => { 'green' => '^[^1-9]', 'yellow' => 5, 'orange' => 50, 'red' => '\d+' },
     },

     {
         'metric'  => "Milestoned Bugs (8.10)",
         'url'     => "https://bugs.launchpad.net/ubuntu/+bugs?field.milestone%3Alist=1326",
         'split'   => '<tr',
         'regex'   => '<td>([a-zA-Z].*)</td>',
         'filter'  => 'matching-packages',
         'test'    => { 'green' => '^[^1-9]', 'yellow' => 5, 'orange' => 50, 'red' => '\d+' },
     },

     {
         'metric'  => "Milestoned Bugs (later)",
         'url'     => "https://bugs.launchpad.net/ubuntu/+bugs?field.milestone%3Alist=196",
         'split'   => '<tr',
         'regex'   => '<td>([a-zA-Z].*)</td>',
         'filter'  => 'matching-packages',
         'test'    => { 'green' => '^[^1-9]', 'yellow' => 5, 'orange' => 50, 'red' => '\d+' },
     },

     {
         'metric'  => "&gt;5 Subscribers (xorg)",
         'url'     => "http://people.ubuntu.com/~brian/reports/gt5subscribers/xorg.html",
         'split'   => '<tr',
         'regex'   => '<td>\((.*)\)</td>',
         'filter'  => 'count',
         'test'    => { 'green' => '^[^1-9]', 'yellow' => 10, 'orange' => 20, 'red' => '\d+' },
     },

     {
         'metric'  => "&gt;5 Subscribers (xorg-server)",
         'url'     => "http://people.ubuntu.com/~brian/reports/gt5subscribers/xorg-server.html",
         'split'   => '<tr',
         'regex'   => '<td>\((.*)\)</td>',
         'filter'  => 'count',
         'test'    => { 'green' => '^[^1-9]', 'yellow' => 10, 'orange' => 20, 'red' => '\d+' },
     },

     {
         'metric'  => "&gt;5 Subscribers (xserver-xgl)",
         'url'     => "http://people.ubuntu.com/~brian/reports/gt5subscribers/xserver-xgl.html",
         'split'   => '<tr',
         'regex'   => '<td>\((.*)\)</td>',
         'filter'  => 'count',
         'test'    => { 'green' => '^[^1-9]', 'yellow' => 10, 'orange' => 20, 'red' => '\d+' },
     },

     {
         'metric'  => "&gt;5 Subscribers (-ati)",
         'url'     => "http://people.ubuntu.com/~brian/reports/gt5subscribers/xserver-xorg-video-ati.html",
         'split'   => '<tr',
         'regex'   => '<td>\((.*)\)</td>',
         'filter'  => 'count',
         'test'    => { 'green' => '^[^1-9]', 'yellow' => 10, 'orange' => 20, 'red' => '\d+' },
     },

     {
         'metric'  => "&gt;5 Subscribers (-intel)",
         'url'     => "http://people.ubuntu.com/~brian/reports/gt5subscribers/xserver-xorg-video-intel.html",
         'split'   => '<tr',
         'regex'   => '<td>\((.*)\)</td>',
         'filter'  => 'count',
         'test'    => { 'green' => '^[^1-9]', 'yellow' => 10, 'orange' => 20, 'red' => '\d+' },
     },

     {
         'metric'  => "&gt;5 Subscribers (-nv)",
         'url'     => "http://people.ubuntu.com/~brian/reports/gt5subscribers/xserver-xorg-video-nv.html",
         'split'   => '<tr',
         'regex'   => '<td>(.*)</td>',
         'filter'  => 'count',
         'test'    => { 'green' => '^[^1-9]', 'yellow' => 10, 'orange' => 20, 'red' => '\d+' },
     },

     {
         'metric'  => "ISO Testing Bug Count",
         'url'     => "https://bugs.launchpad.net/ubuntu/[[release]]/+bugs?field.tag=iso-testing",
         'split'   => '<tr',
         'regex'   => '<td>(.*)</td>',
         'filter'  => 'matching-packages',
         'test'    => { 'green' => '^[^1-9]', 'yellow' => 10, 'orange' => 20, 'red' => '\d+' },
     },

     {
         'heading'  => "Packaging",
     },

     {
         'metric'  => "Packages Needing Updates",
         'url'     => "http://people.ubuntu.com/~bryce/Xorg/versions_current.html",
         'split'   => '<tr',
         'regex'   => 'https://launchpad.net/ubuntu/[[release]]/\+source/.*\'(needs-merge|needs-sync)\'',
         'filter'  => 'count',
         'test'    => { 'green' => '^[^1-9]', 'yellow' => 10, 'orange' => 100, 'red' => '\d+' },
     },

     {
         'metric'  => "Packages With Patches",
         'url'     => "http://daniel.holba.ch/really-fix-it/",
         'split'   => '<tr',
         'regex'   => '<td>(.+?)</td><td>.+?</td>',
         'filter'  => 'matching-packages',
         'test'    => { 'green' => '^[^1-9]', 'yellow' => 5, 'orange' => 10, 'red' => '\d+' },
     },

     {
         'metric'  => "Packages Needing Sponsored",
         'url'     => "http://people.ubuntu.com/~dholbach/sponsoring/",
         'split'   => '<tr',
         'regex'   => '\d+</a></td><td>(.+?)</td><td>',
         'filter'  => 'matching-packages',
         'test'    => { 'green' => '^[^1-9]', 'yellow' => 5, 'orange' => 10, 'red' => '\d+' },
     },

     {
         'metric'  => "Package Uploads Needing Approval",
         'url'     => "https://launchpad.net/ubuntu/[[release]]/+queue?queue_state=1",
         'split'   => '<tr',
         'regex'   => '([\w-]+) \(source\)',
         'filter'  => 'matching-packages',
         'test'    => { 'green' => '^[^1-9]', 'yellow' => 5, 'orange' => 10, 'red' => '\d+' },
     },

     {
         'metric'  => "Packages Uninstallable",
         'url'     => "http://people.ubuntu.com/~ubuntu-archive/testing/[[release]]_probs.html",
         'regex'   => '<li>(.+) \(',
         'filter'  => 'matching-packages',
         'test'    => { 'green' => '^[^1-9]', 'yellow' => 1, 'orange' => 3, 'red' => '\d+' },
     },

     {
         'metric'  => "Packages With Broken Deps",
         'url'     => "http://people.ubuntu.com/~ubuntu-archive/NBS",
         'regex'   => '\]"> <a href="(.*)">.*</a>',
         'filter'  => 'matching-packages',
         'test'    => { 'green' => '^[^1-9]', 'red' => '\d+' },
     },

     {
         'heading'  => "Testing",
     },

     {
         'metric'  => "Automatic Upgrade Failures",
         'url'     => "http://people.ubuntu.com/~mvo/automatic-upgrade-testing/",
         'regex'   => 'got a error from dpkg for pkg: \'(.*)\':',
         'filter'  => 'matching-packages',
         'test'    => { 'green' => '^[^1-9]', 'red' => '\d+' },
     },

     );


# TODO:  Get a listing of all Xorg-related packages
my @Packages = get_packages();
my %Packages = ();

sub main {
    my $section = '';
    my $tt      = Template->new();
    my $vars    = {
        'Release' => ucfirst($release),
        'Team'    => 'Xorg',
        'Today'   => UnixDate("today", "%Y/%m/%d"),
        'Prev'    => UnixDate("yesterday", "status_%Y%m%d.html"),
        'Next'    => UnixDate("tomorrow", "status_%Y%m%d.html"),
        %Color,
    };

    # Cache @Packages into a hash
    foreach my $p (@Packages) {
        $Packages{$p} = 1;
    }

    # Process all the reports, and print out to screen
    foreach my $item (@Reports) {
        if (defined $item->{'heading'}) {
#            warn "Processing " . $item->{'heading'} . "\n";
            $section = $item->{'heading'};
            $item->{subcat} = '';
        } elsif ($item->{'metric'}) {
            if ($item->{'metric'} =~ m|\s*(.+?)\s*\((.*)\)|) {
                $item->{'category'} = $1;
                $item->{'subcat'} = $2;
            } else {
                $item->{'subcat'} = '';
            }
            push @{$vars->{$section}}, process_item($item);
        }
    }

    # Place content into template and print out
    $tt->process(\*DATA, $vars)
        || die $tt->error();
}

sub get_packages {
    my $url = "http://people.ubuntu.com/~bryce/Xorg/versions_current.html";
    my @packages = ();
    my $content = get($url);
    if (! $content) {
        warn "Error:  Could not fetch $url\n";
        getprint($url);
        exit;
    }

    foreach my $line (split /<tr/, $content) {
        my $pkg = undef;
        if ($line =~ m|><td>(.*?)</td>|) {
            $pkg = $1;
        } elsif ($line =~ m|class='black'>(.*?)</a></b></td>|) {
            $pkg = $1;
        }

        # While compiz is part of X, we won't count it against our stats
        # since its bugs, etc. are handled by a different team
        if ($pkg) {
            next if ($pkg eq 'compiz');
            push @packages, $pkg;
        }
    }
    return (@packages, 'xorg');
}

# Returns an arrayref of all matches for the given url
sub parse_url {
    my ($url, $regex, $split) = @_;
    my @matches = ();
    my $next_url = $url;
    $regex =~ s/\[\[release\]\]/$release/g;
    while ($next_url) {
        my $content = get($next_url);
        if (! defined $content) {
            warn " Failed to retrieve $url\n";
            next;
        }
        $next_url = undef;
        if ($content =~ m|href="(https://.*launchpad\.net/.*start=\d+)">Next</a>|) {
            $next_url = $1;
        }
        $split ||= "\n";
        foreach my $line (split /$split/, $content) {
            if ($line =~ m|$regex|) {
                my $match = $1;

                # Special hack just for linux-restricted-modules, since we only care
                # about X drivers in l-r-m really, so we require it matches one of our
                # drivers somewhere on the line.
                if ($match =~ /linux-restricted-modules/) {
                    next unless $line =~ /(nvidia|fglrx)/i;
                }

#                warn " Matched $match\n";
                push @matches, $match;
            }
        }
    }
    return \@matches;
}

sub test_status {
    my ($status, $test) = @_;
    if (! defined $status || $status eq 'error') {
        return "error";
    } elsif (defined $status && defined $test) {
        for my $rank (@Ranks) {
            my $t = $test->{$rank} || next;
            if ( $t =~ /^\d+$/ ) {
                if ($status+0 < $t+1 ) {
                    return $Color{$rank};
                }
            } elsif ($status =~ m{$t}) {
                return $Color{$rank};
            }
        }
    }
}

sub results_status {
    my ($results, $filter) = @_;
    if ($filter && $filter eq 'matching-packages') {
        my $num = 0;
        foreach my $pkg (@{$results}) {
            next unless $pkg;
            if (defined $Packages{$pkg}) {
                $num++;
            }
        }
        return $num;
    } elsif ($filter && $filter eq 'count') {
        return @{$results}+0;
    } elsif (@{$results}) {
        return $results->[0];
    } else {
        return "error";
    }
}

sub process_item {
    my $item = shift;
    $item->{'url'}     =~ s/\[\[release\]\]/$release/g;
#    warn " - Fetching " . $item->{'url'} . "\n";
    $item->{'results'} = parse_url(      $item->{'url'},     $item->{'regex'},  $item->{'split'} );
    $item->{'status'}  = results_status( $item->{'results'}, $item->{'filter'} );
    $item->{'color'}   = test_status(    $item->{'status'},  $item->{'test'} );
    return $item;
}

main();

__DATA__
<html>
<head>
 <title>Ubuntu Xorg Status</title>
 <link rel="stylesheet" type="text/css" charset="utf-8" media="all" href="http://www.ubuntu.com/htdocs/ubuntuweb/css/common.css">
 <link rel="stylesheet" type="text/css" charset="utf-8" media="screen" href="http://www.ubuntu.com/htdocs/ubuntuweb/css/screen.css">
 <style>
  <!--
    a {text-decoration:none; }
  //-->
 </style>
</head>
<body>
<table border=0 width='100%'><tr>
  <td align='left'><b><a href='[% Prev %]'>prev</a></b>&nbsp;</td>
  <td align='center'><b>[% Today %]</b>&nbsp;</td>
  <td align='right'><b><a href='[% Next %]'>next</a></b>&nbsp;</td>
</tr></table>

<h2>Ubuntu [% Release %] [% Team %] Status</h2>

<table border=1 cellpadding=5 cellspacing=0>
<tbody>
[%- FOREACH Summary %]
<tr><td colspan="2">[% metric %]</td> <td bgcolor="[% color %]" align="right"><a href="[% url %]">[% status %]</a></td></tr>
[% END %]

<tr><td colspan="3"><h4>[% Team %] Bugs</h4></td></tr>
[%- FOREACH Bugs -%]
[%-  IF subcat -%]
[%-   IF curcat != category;
         curcat = category -%]
<tr><td>[% category %]</td><td>[% subcat %]</td> <td bgcolor="[% color %]" align="right"><a href="[% url %]">[% status %]</a></td></tr>
[%    ELSE -%]
<tr><td>&nbsp;</td><td>[% subcat %]</td> <td bgcolor="[% color %]" align="right"><a href="[% url %]">[% status %]</a></td></tr>
[%   END %]
[%-  ELSE -%]
<tr><td colspan="2">[% metric %]</td> <td bgcolor="[% color %]" align="right"><a href="[% url %]">[% status %]</a></td></tr>
[%-  END -%]
[% END %]

<tr><td colspan="3"><h4>[% Team %] Packaging</h4></td></tr>
[%- FOREACH item IN Packaging %]
<tr><td colspan="2">[% item.metric %]</td> <td bgcolor="[% item.color %]" align="right"><a href="[% item.url %]">[% item.status %]</a></td></tr>
[% END %]

<tr><td colspan="3"><h4>[% Team %] Testing</h4></td></tr>
[%- FOREACH item IN Testing %]
<tr><td colspan="2">[% item.metric %]</td> <td bgcolor="[% item.color %]" align="right"><a href="[% item.url %]">[% item.status %]</a></td></tr>
[% END %]
</tbody>
</table>

<p>

</body>
</html>
