#!/usr/bin/perl

# TODO
#  * Hide packages that don't exist in debian or ubuntu
#  * Shrink table padding
#  * Shrink overall text size
#  * Auto-determine the old and new distros (convert to python?)
#  * Is ExtraPackages still needed?  OmitPackages?

use strict;
use Pod::Usage;
use Getopt::Long;
use LWP::Simple;
use Perl::Version;
use File::Spec::Functions ':ALL';
use File::Basename;
use Date::Manip;

#------------------------------------------------------------------------
# Configurable Overrides
#------------------------------------------------------------------------
my @ExtraPackages =
    qw(
       xserver-xorg-video-psb
       xserver-xorg-video-openchrome
       libxcb
       mdetect
       libpixman
       );

my @OmitPackages =
    qw(
       compiz
       xserver-xorg-video-amd
       xserver-xorg-video-radeon
       );

#------------------------------------------------------------------------
# Config variables
#------------------------------------------------------------------------
our $opt_version      = 0;
our $opt_help         = 0;
our $opt_man          = 0;
our $opt_debug        = 0;
our $opt_html         = 0;
our $opt_notesurl     = 'https://wiki.ubuntu.com/X/PackageNotes';
our $opt_xorgurl      = "http://xorg.freedesktop.org/releases/individual/";
our $opt_extraurls    = ("http://xlibs.freedesktop.org/xkbdesc/");
our $opt_xswaturl     = "https://bugs.launchpad.net/~ubuntu-x-swat/+packagebugs";

# TODO: This breaks because these programs aren't run within the chroot
#       so need to pass them in from the cron job, or perhase parse them
#       out of /etc/apt/sources.list?
#our $opt_old_ubuntu   = `current-ubuntu-release-codename`;
#our $opt_new_ubuntu   = `current-ubuntu-development-codename`;
our $opt_old_ubuntu = 'raring';
our $opt_new_ubuntu = 'saucy';

chomp $opt_old_ubuntu;
chomp $opt_new_ubuntu;

#------------------------------------------------------------------------
# Commandline option processing
#------------------------------------------------------------------------
Getopt::Long::Configure ("bundling", "no_ignore_case");
GetOptions(
           "version|V",         # Prints the version and exits
           "help|h",            # Prints a brief help message
           "man",               # Prints a manual page (detailed help)
           "debug|D=i",         # Prints debug messages
           "html",              # Print HTML output
           "xorgurl|x=s",       # URL for getting Xorg pkgs
           "extraurls|u=s",     # More URLs to parse for Xorg pkgs
           "xswaturl|s=s",      # URL listing XSwat's pkg responsibilities
           ) or pod2usage(-verbose => 1, -exitstatus => 0);

if ($opt_version) {
    print "unreleased\n";
    exit 0;
}

pod2usage(-verbose => 2, -exitstatus => 0) if ($opt_man);
pod2usage(-verbose => 1, -exitstatus => 0) if ($opt_help);

my %Packages;
my %BasePackages;

@{$BasePackages{'xfonts-base'}} = qw(font-arabic-misc font-cursor-misc font-daewoo-misc font-dec-misc font-isas-misc font-jis-misc font-micro-misc font-misc-misc font-mutt-misc font-schumacher-misc font-sony-misc font-sun-misc);

@{$BasePackages{'xfonts-100dpi'}} = qw(font-adobe-100dpi font-bh-100dpi font-bh-lucidatypewriter-100dpi font-bitstream-100dpi);

@{$BasePackages{'xfonts-75dpi'}} = qw(font-adobe-75dpi font-bh-75dpi font-bh-lucidatypewriter-75dpi font-bitstream-75dpi);

@{$BasePackages{'xfonts-cyrillic'}} = qw(font-cronyx-cyrillic font-screen-cyrillic font-winitzki-cyrillic font-misc-cyrillic);

my %Translations;
# Reverse %BasePackages into %Translations
foreach my $base (keys %BasePackages) {
    $Packages{$base}->{xorg} = 0;
    $Packages{$base}->{xorg_tarball} = undef;
    $Packages{$base}->{xorg_catpkg}  = undef;

    foreach my $pkg (@{$BasePackages{$base}}) {
        $Translations{$pkg} = $base;
    }
}

# This routine gets a list of the packages that Ubuntu's XSwat
# team is responsible for maintaining, and adds them to ExtraPackages.
sub parse_ubuntu_xswat_page {
    my $url = shift || return undef;
    my $content = get($url);

    return undef unless $content;

    foreach my $line (split /\n/, $content) {
        if ($line =~ m|ubuntu-x-swat.*>(.+) in ubuntu</a>|i) {
            my $pkg = $1;

            push @ExtraPackages, $pkg;
        }
    }
}


# Retrieves the latest.txt file from nvidia, parses, and returns the latest version number
sub parse_nvidia_page {
    my $content = get("ftp://download.nvidia.com/XFree86/Linux-x86/latest.txt");
    if ($content =~ /^([\d\.]+)\s+(.*)$/) {
        my $pkgversion = $1;
        $Packages{'nvidia-graphics-drivers'}->{xorg} = $pkgversion;
    }
}

sub parse_xorg_page {
    my $url = shift || return undef;
    my $content = get($url);

    if (! defined $content) {
        getprint($url);
        return undef;
    }

    foreach my $line (split /\n/, $content) {
        if ($line =~ m|<a href="(.*?\.tar\.\w+)"|) {
            # This looks like a downloadable package of some sort
            my $pkg = $1;
            my ($pkgname, $pkgversion, $xorg_pkgname);

            if ($pkg =~ m|^([\w-]+)-([\d\.]+)\.tar\.|) {
                ($pkgname, $pkgversion) = ($1, $2);
            }
            $xorg_pkgname = $pkgname;

            # Fixups for package name to translate to debian/ubuntu
            $pkgname =~ s/^xf86-/xserver-xorg-/;
            $pkgname =~ s/^xproto$/x11proto-core/;
            $pkgname =~ s/^(.*)proto$/x11proto-\1/;
            $pkgname =~ s/^encodings$/xfonts-encodings/;
            $pkgname = lc $pkgname;

            # Skip this package if it is a base package
            my $old_version = $Packages{$pkgname}->{xorg};

            if ($old_version) {
                my $oldV = Perl::Version->new($old_version);
                my $newV = Perl::Version->new($pkgversion);

                # If this version is older, skip it
                next if ($oldV->vcmp( $newV ) > 0);
            }
            $Packages{$pkgname}->{xorg} = $pkgversion;
            $Packages{$pkgname}->{xorg_tarball} = "$url/$pkg";
            $Packages{$pkgname}->{xorg_catpkg} = basename($url)."/".$xorg_pkgname;

            # Hacks around weird xorg naming schemes
            if ($xorg_pkgname eq 'xorg-server') {
                $Packages{$pkgname}->{xorg_catpkg} = "xserver";
            } elsif ($xorg_pkgname eq 'libxss') {
                $Packages{$pkgname}->{xorg_catpkg} = "libXScrnSaver";
            }
        }
    }

}

my $basedir = rel2abs(curdir());

# Get content from Xorg
my $content = get($opt_xorgurl);

die "Couldn't retrieve upstream package listings from '$opt_xorgurl'"
    unless defined $content;

foreach my $line (split /\n/, $content) {
    if ($line =~ m|<a href="(\w+)/">|) {
        # Parse the sub-page
        parse_xorg_page("$opt_xorgurl$1");
    }
}

for my $url ($opt_extraurls) {
    parse_xorg_page($url);
}

# Add extra non-Xorg packages we wish to also track
#warn "Parsing xswat page\n";
parse_ubuntu_xswat_page($opt_xswaturl);

# Retrieve nvidia page
#warn "Parsing nvidia latest\n";
parse_nvidia_page();

for my $pkgname (@ExtraPackages) {
    if (! defined $Packages{$pkgname}) {
        $Packages{$pkgname}->{xorg} = '';
    }
}

# Remove packages we explicitly don't want
for my $pkgname (@OmitPackages) {
    if (defined $Packages{$pkgname}) {
        delete $Packages{$pkgname};
    }
}

# Retrieve ubuntu and debian versions
foreach my $pkg (keys %Packages) {
    foreach my $line (`apt-cache madison $pkg`) {
        $line =~ s/^\s+//;
        my ($p,undef,$r,undef,undef,$from,$type) = split(/\s+/,$line);
        next unless ($type eq "Sources");

        if ($from =~ m|^(.*)/(.*)$|) {
            $from = $1;
        }
        my $current = $Packages{$pkg}->{$from};
        if ($current) {
            system("dpkg --compare-versions $current lt $r");
            if ($? == 0) {
                $Packages{$pkg}->{$from} = $r;
            }
        } else {
            $Packages{$pkg}->{$from} = $r;
        }
    }
}

# Get package notes
my %Notes;
$content = get($opt_notesurl);
if (not defined $content) {
    #warn "Couldn't retrieve package notes from '$opt_notesurl'";
} else {
    $content =~ s/\s*<span class="anchor" id="[\w-]+"><\/span>/\n/g;
    #warn $content;

    foreach my $line (split /\n/, $content) {
	if ($line =~ m/^<li[^>]*><p> ([^:]*):\s+(.*) <\/p>$/) {
	    my ($pkg, $note) = ($1, $2);
	    $Notes{$pkg} = $note;
	    #warn "$pkg:  $Notes{$pkg}\n";
	}
	elsif ($line =~ m/<li[^>]*>([^:]*):\s+(.*)$/) {
	    my ($pkg, $note) = ($1, $2);
	    $Notes{$pkg} = $note;
	    #warn "$pkg:  $Notes{$pkg}\n";
	}
    }
}

if ($opt_html) {
    # Print out all the version information
    print "<html>\n";
    print "<head>\n";
    print " <title>Xorg, Ubuntu, and Debian releases</title>\n";
    print " <link rel=\"stylesheet\" type=\"text/css\" charset=\"utf-8\" media=\"all\" href=\"http://www.ubuntu.com/htdocs/ubuntuweb/css/common.css\">\n";
    print " <link rel=\"stylesheet\" type=\"text/css\" charset=\"utf-8\" media=\"screen\" href=\"http://www.ubuntu.com/htdocs/ubuntuweb/css/screen.css\">\n";
    print " <style>\n";
    print "  <!--\n";
    print "   td { font-size: 0.8em; }\n";
    print "   a.black {text-decoration:none; color:black; }\n";
    print "   a.debian-needs-merge {text-decoration:none; color:YellowGreen; font-weight: bold; }\n";
    print "   a.needs-merge {text-decoration:none; color:red; font-weight: bold; }\n";
    print "   a.needs-sync {text-decoration:none; color:orange; font-weight: bold; }\n";
    print "   a.may-need-merge {text-decoration:none; color:blue; font-weight: bold; }\n";
    print "   a.may-need-sync {text-decoration:none; color:RoyalBlue ; font-weight: bold; }\n";
    print "   a.okay {text-decoration:none; color:green; font-weight: bold; }\n";
    print "  //-->\n";
    print " </style>\n";
    print "</head>\n";
    print "<body>\n";

    my $today = UnixDate("today", "%Y/%m/%d");
#    my $prev = UnixDate("yesterday", "versions_%Y%m%d.html");
#    my $next = UnixDate("tomorrow", "versions_%Y%m%d.html");

# TODO: These links won't work right
    print "<table border=0 width='100%'><tr>\n";
    print "<td align='left'>";
#    print "<b><a href='$prev'>prev</a></b>";
    print "&nbsp;</td>\n<td align='center'>";
    print "<h3>$today</h3>";
    print "&nbsp;</td>\n<td align='right'>";
#    print "<b><a href='$next'>next</a></b>";
    print "&nbsp;</td>\n</tr></table>\n";

    my $old_ubuntu = ucfirst($opt_old_ubuntu);
    my $new_ubuntu = ucfirst($opt_new_ubuntu);

    print "<table border=1 cellpadding=0 cellspacing=0 width='100%'>\n";
    print "<tr><td><b><br>Package</b></td><td><b><br>Xorg</b></td><td><b>Debian<br>Testing</b></td><td><b>Debian<br>Unstable</b></td><td><b>Debian<br>Experimental</b></td><td><b>Ubuntu<br>$old_ubuntu</b></td><td><b>Ubuntu<br>$new_ubuntu</b></td><td><b><a href=\"http://wiki.ubuntu.com/X/PackageNotes\">Notes</a></b></td></tr>\n";
}

my %totals;
foreach my $pkg (sort keys %Packages) {
    my (%version, %status);

    # Skip it if this is part of a base package or one we intentionally omit
    next if (defined $Translations{$pkg});

    for my $dist (("xorg", $opt_old_ubuntu, $opt_new_ubuntu, "testing", "unstable", "experimental")) {
        $version{$dist} = $Packages{$pkg}->{$dist};
        $version{$dist} =~ s/^\d://;
    }

    for my $dist (qw(testing unstable experimental)) {
        if ($version{xorg} && $version{$dist}) {
            system("dpkg --compare-versions $version{$dist} lt $version{xorg}");
            $status{$dist} = 'needs-merge' if ($? == 0);
        }
    }

    for my $dist (($opt_old_ubuntu, $opt_new_ubuntu)) {
        if ($version{$dist}) {
            $status{$dist} = 'okay';

            if ($version{xorg}) {
                system("dpkg --compare-versions $version{$dist} lt $version{xorg}");
                $status{$dist} = 'debian-needs-merge' if ($? == 0);
            }

            if ($version{'experimental'}) {
                system("dpkg --compare-versions $version{$dist} lt $version{experimental}");
                if ($? == 0) {
                    if ($version{$dist} =~ /ubuntu/) {
                        $status{$dist} = 'may-need-merge';
                    } else {
                        $status{$dist} = 'may-need-sync';
                    }
                }
            } elsif ($version{'unstable'}) {
                system("dpkg --compare-versions $version{$dist} lt $version{unstable}");
                if ($? == 0) {
                    if ($version{$dist} =~ /ubuntu/) {
                        $status{$dist} = 'needs-merge';
                    } else {
                        $status{$dist} = 'needs-sync';
                    }
                }
            } elsif ($version{'testing'}) {
                system("dpkg --compare-versions $version{$dist} lt $version{testing}");
                if ($? == 0) {
                    if ($version{$dist} =~ /ubuntu/) {
                        $status{$dist} = 'needs-merge';
                    } else {
                        $status{$dist} = 'needs-sync';
                    }
                }
            }

        }
    }

    if ($opt_html) {
        my %style;
        my $keep = undef;
        for my $dist (("xorg", $opt_old_ubuntu, $opt_new_ubuntu, "testing", "unstable", "experimental")) {
            $style{$dist} = $status{$dist} || 'black';
            if ($dist ne 'xorg' && defined $Packages{$pkg}->{$dist}) {
                $keep = 1;
            }
        }
        next unless ($keep);

        my %pkg_url;
        my $l = substr($pkg, 0, 1);
        if ($pkg =~ m|(lib.)|) {
            $l = $1;
        }
        $pkg_url{'testing'} = "http://packages.qa.debian.org/$l/$pkg.html";
        $pkg_url{'unstable'} = "http://packages.qa.debian.org/$l/$pkg.html";
        $pkg_url{'experimental'} = "http://packages.qa.debian.org/$l/$pkg.html";

        $pkg_url{$opt_old_ubuntu} = "https://launchpad.net/ubuntu/$opt_old_ubuntu/+source/$pkg";
        $pkg_url{$opt_new_ubuntu} = "https://launchpad.net/ubuntu/$opt_new_ubuntu/+source/$pkg";
        if ($Packages{$pkg}->{xorg}) {
            printf(qq{<tr>
    <td><b><a href='http://cgit.freedesktop.org/xorg/%s' class='black'>%s</a></b></td>
    <td><a href='%s' class='%s'>%s</a></td>
},
                   $Packages{$pkg}->{xorg_catpkg},
                   $pkg,
                   $Packages{$pkg}->{xorg_tarball},
                   $style{xorg},
                   $Packages{$pkg}->{xorg});
        } else {
            printf("<tr><td>$pkg</td><td>-</td>");
        }

        for my $d (("testing", "unstable", "experimental", $opt_old_ubuntu, $opt_new_ubuntu)) {
            if ($Packages{$pkg}->{$d}) {
                my $pkg_version = $Packages{$pkg}->{$d};
                my $dsc = "";
                my $l = substr($pkg, 0, 1);
                if ($pkg =~ m|(lib.)|) {
                    $l = $1;
                }
                # Strip out any epochs
                $pkg_version =~ s/^\d://;

                my $dsc_url = "http://ftp.debian.org/debian/pool/main/${l}/${pkg}/${pkg}_${pkg_version}.dsc";
                if ($pkg_version =~ m/git/) {
                    $pkg_version =~ s/git/git<br>&nbsp;&nbsp;/;
                }
                if ($pkg_version =~ m/cvs/) {
                    $pkg_version =~ s/cvs/cvs<br>&nbsp;&nbsp;/;
                }
                if ($pkg_version =~ m/svn/) {
                    $pkg_version =~ s/svn/svn<br>&nbsp;&nbsp;/;
                }
                if ($pkg_version =~ m/bzr/) {
                    $pkg_version =~ s/bzr/bzr<br>&nbsp;&nbsp;/;
                }
                if ($d eq "testing" or $d eq "unstable" or $d eq "experimental") {
                    $dsc = "&nbsp;(<a href='$dsc_url' class='$style{$d}'>dsc</a>)";
                }
                printf("<td><a href='%s' class='%s'>%s</a>%s</td>",
                       $pkg_url{$d},
                       $style{$d},
                       $pkg_version,
                       $dsc);
                if (! defined $totals{$d}->{$style{$d}}) {
                    $totals{$d}->{$style{$d}} = 0;
                }
                $totals{$d}->{$style{$d}}++;
            } else {
                printf("<td>--</td>\n");
            }
        }

        # Print notes column
        if ($Notes{$pkg}) {
            if ($Notes{$pkg} =~ /\#([0-9]+)\b/) {
                printf("<td><a href='http://bugs.launchpad.net/ubuntu/+bug/%s' class='%s'>%s</a></td>\n",
                       $1,
                       'black',
                       $Notes{$pkg});
            } else {
                printf("<td>%s</td>\n", $Notes{$pkg});
            }
        } else {
            print "<td>&nbsp;</td>\n";
        }

        print "</tr>\n";
    }

}

print "<tr style='border-style: double none none none'>\n";
print " <td><b>Total updates needed:</b> </td><td></td>";
for my $d (("testing", "unstable", "experimental", $opt_old_ubuntu, $opt_new_ubuntu)) {
    my $total = 0;
    for my $s (('needs-sync', 'needs-merge')) {
        if (defined $totals{$d}->{$s}) {
            $total += $totals{$d}->{$s};
        }
    }
    my $total_experimental = 0;
    for my $s (('may-need-sync', 'may-need-merge')) {
        if (defined $totals{$d}->{$s}) {
            $total_experimental += $totals{$d}->{$s};
        }
    }
    my $color = 'green';
    if ($total >= 50) {
        $color = 'red';
    } elsif ($total > 25) {
        $color = 'orange';
    } elsif ($total > 10) {
        $color = 'gold';
    } elsif ($total > 0) {
        $color = 'YellowGreen';
    }
    if ($total_experimental > 0) {
        print " <td><b style='color:$color'>$total</b> (<b style='color:blue'>$total_experimental</b>)</td>";
    } else {
        print " <td><b style='color:$color'>$total</b></td>";
    }
}
print "</tr>\n";

if ($opt_html) {
    print "</table>\n";
    print "<p><b> Key: </b><br />\n";
    print "&nbsp; <a class='may-need-merge'>May Need Merge to Experimental</a> <br />\n";
    print "&nbsp; <a class='may-need-sync'>May Need Sync to Experimental</a> <br />\n";
    print "&nbsp; <a class='needs-merge'>Needs Merge</a> <br />\n";
    print "&nbsp; <a class='needs-sync'>Needs Sync</a> <br />\n";
    print "&nbsp; <a class='debian-needs-merge'>Upstream version not yet in Debian</a> <br />\n";
    print "&nbsp; <a class='okay'>Up to date</a> </p>\n";
    print "\n</body>\n</html>\n";
}

# Ideas:
#   * Bug count in last column w/ link to LP
#   * Activate debian experimental by adding the following to
#     /etc/apt/sources.list:
#     deb-src http://ftp.us.debian.org/debian/ experimental main
#     But will need to run it in a chroot or something so it
#     doesn't screw up apt-get sources
#   * Add a notes field that lets me add per-package comments
