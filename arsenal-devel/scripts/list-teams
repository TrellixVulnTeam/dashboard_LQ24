#!/usr/bin/env python

import sys,os.path
sys.path.insert(0, os.path.realpath(
        os.path.join(os.path.dirname(__file__), "..")))

from sys                                import argv, stdout, exit
from getopt                             import getopt, GetoptError
from datetime                           import datetime
import json

from arsenal.dbg                        import Dbg
from arsenal.utils                      import stdo, error, json_load, file_load, FileDoesntExist, date_to_string, string_to_date
from arsenal.cfg                        import Cfg, CfgError

from mako.template                      import Template, exceptions

# CmdlineError
#
# The type of exception that will be raised by Cmdline.process() if there
# are command line processing errors.
#
class CmdlineError(Exception):
    # __init__
    #
    def __init__(self, error):
        self.msg = error

# Cmdline
#
class Cmdline:
    """
    Handle all the command line processing for the application.
    """
    # error
    #
    def error(self, e, defaults):
        """
        Simple helper which prints out an error message and then prints out the usage.
        """
        if e != '': error("%s\n" % e)
        self.usage(defaults)

    # usage
    #
    def usage(self, defaults):
        """
        Prints out the help text which explains the command line options.
        """
        stdo('    Usage:                                                                                   \n')
        stdo('        %s [Options] <data-file>                                                             \n' % defaults['app_name'])
        stdo('                                                                                             \n')
        stdo('    Options:                                                                                 \n')
        stdo('        --help           Prints this text.                                                   \n')
        stdo('                                                                                             \n')
        stdo('        --debug=<debug options>                                                              \n')
        stdo('                         Performs additional output related to the option enabled and        \n')
        stdo('                         the application defined support for the option.                     \n')
        stdo('                                                                                             \n')
        stdo('                         Recognized debug options:                                           \n')
        stdo('                             enter                                                           \n')
        stdo('                             leave                                                           \n')
        stdo('                             verbose                                                         \n')
        stdo('                             cfg                                                             \n')
        stdo('                                                                                             \n')
        stdo('    Examples:                                                                                \n')
        stdo('        %s --debug="enter,leave,verbose"                                                     \n' % defaults['app_name'])

    # process
    #
    def process(self, argv, defaults):
        """
        This method is responsible for calling the getopt function to process the command
        line. All parameters are processed into class variables for use by other methods.
        """
        result = True
        try:
            cfg = defaults
            optsShort = ''
            optsLong  = ['help', 'debug=' ]
            opts, args = getopt(argv[1:], optsShort, optsLong)

            for opt, val in opts:
                if (opt == '--help'):
                    raise CmdlineError('')

                elif opt in ('--debug'):
                    cfg['debug'] = val.split(',')
                    for level in cfg['debug']:
                        if level not in Dbg.levels:
                            Dbg.levels.append(level)

            if result: # No errors yet
                # There might be some bugs listed on the command line.
                #
                if len(args) > 0:
                    cfg['json_file'] = args

        except GetoptError, error:
            raise CmdlineError(error)

        # Verify we have all the command line options that are required.
        #
        if 'json_file' not in cfg:
            raise CmdlineError("A single json data file must be specified.\n")

        if len(cfg['json_file']) > 1:
            raise CmdlineError("A single json data file must be specified.\n")

        cfg['json_file'] = cfg['json_file'][0]

        return cfg


# Exit
#
class Exit():
    """
    If an error message has already been displayed and we want to just exit the app, this
    exception is raised.
    """
    pass

# ListTeams
#
class ListTeams():
    """
    Load a json file and a mako html template file, pass the resulting python object to
    the mako template renderer. This is a general class that can take any json file and
    any mako template file and produce an html file. The template file is, of course,
    specific to the json data.
    """

    # __init__
    #
    def __init__(self, cfg):
        Dbg.enter("ListTeams.__init__")

        self.cfg    = cfg
        Dbg.leave("ListTeams.__init__")

    # initialize
    #
    def initialize(self):
        """
        A separate initialize that we can control when it gets called (not
        when the object is instantiated).
        """
        Dbg.enter("ListTeams.initialize")

        try:
            # Process the command line arguments, and any configuration file options. Make sure
            # that any required parameters have been provided.
            #
            self.cfg = Cfg.merge_options(defaults, self.cfg)

            self.template_data = json_load(self.cfg['json_file'])

        except KeyboardInterrupt:
            Dbg.leave("ListTeams.initialize")
            raise Exit()

        except CfgError as e:
            error(e)
            Dbg.leave("ListTeams.initialize")
            raise Exit()

        except FileDoesntExist as e:
            e.print_std_error()
            raise Exit()

        Dbg.leave("ListTeams.initialize")
        return

    # main
    #
    def main(self):
        Dbg.enter("ListTeams.main")
        retval = -1

        try:
            self.initialize()

            teams = []

            for bid in self.template_data['tasks']:
                for task in self.template_data['tasks'][bid]:
                    if task['team'] == '':
                        continue
                    if task['team'] not in teams:
                        teams.append(task['team'])

            print(' '.join(teams))

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        except Exit:
            pass

        Dbg.leave("ListTeams.main")
        return retval


if __name__ == '__main__':
    defaults = {}
    defaults['app_name'] = argv[0]

    # The cmdline processing is done here partially so the debug options
    # can be processed right away.
    #
    cmdline = Cmdline()
    try:
        app = ListTeams(cmdline.process(argv, defaults))
        exit(app.main())
    except CmdlineError as e:
        cmdline.error(e.msg, defaults)

# vi:set ts=4 sw=4 expandtab:

