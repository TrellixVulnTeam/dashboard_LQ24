                          ---== Arsenal ==---

Arsenal is a framework for tools to interact with the Launchpad bug
tracker.


== Dependencies ==

* launchpadlib

* python-launchpadlib-toolkit:
   + apt-get install python-launchpadlib-toolkit  # Maverick and newer
   ...or...
   + bzr branch lp:~arsenal-devel/arsenal/python-launchpadlib-toolkit
   + cd python-launchpadlib-toolkit && sudo python setup.py install

* Template-Python:
   + svn co svn://svn.tt2.org/tt/Template-Python/trunk Template-Python
   + cd Template-Python && sudo python setup.py install

* bzutils
   + sudo apt-get install python-bzutils

* python-genshi
   + apt-get install python-genshi



Ubuntu Bug Report Kit
=====================

Scripts
-------------------
* reports/cbd - "collect bug data".
        A script which takes a JSON formatted input/configuration file,
        and searches Launchpad for the relevant bugs. The task search
	is done using the LP distribution object.

* reports/cbd-projects
	Exactly the same as cbd above except the task search is done
	using LP project objects.

* reports/reporter
        A script that takes a JSON data file, created by one of the
	cbd scripts mentioned above, and passes that data to a mako
	template file for creating html files.

* reports/cache-lp-resources
	Takes a csv file of project<->team pairs and creates a JSON
	file which is used by the cbd script. The csv file is obtained
	by downloading a google document.

Directories
-------------------

reports/hwe
	The Hardware Enablement teams configuration files. There is
	also a script for generating all the reports.

reports/kernel
	Just a placeholder for now

reports/media
	All the javascript, css and image files that are used on
	the generated web pages.

reports/qa
	The configuration files for the QA teams html reports. There
	is also a Makefile for generating all the reports.

reports/rls-mgr
	The configuration files for the release managers reports.
	There is also a Makefile for generating all the reports.

reports/templates
	The mako templates that are used to generate the different
	reports.

reports/arsenal
	The python modules that are used by the various scripts.


Development
===========
When doing development on Arsenal, create two checkouts in your local
directory:

  arsenal
  arsenal-trunk

Do your work on the arsenal tree and commit all of your changes there.
When you're ready to upload, do this:

  1.  cd arsenal-trunk && bzr pull

  2.  cd ../arsenal && bzr merge ../arsenal-trunk

  3.  cd ../arsenal-trunk && bzr merge ../arsenal

  4.  bzr commit

  5.  bzr push

  6.  cd ../arsenal && bzr pull ../arsenal-trunk

This way helps preserve the log history.  If you just do bzr merge into
your working tree and then bzr push, the trunk changes you merged in
will have their revision numbers re-numbered, which can cause some
confusion.
