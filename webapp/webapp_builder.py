#! /usr/bin/env python2

import sys
import json
#from buginfo import BugInfo
from CredentialStore import CredentialStore
from launchpadlib.launchpad import Launchpad
from launchpadlib.credentials import Credentials
from lazr.restfulclient.errors import HTTPError
  
def main():
    (project, title, json_loc, arsenal_scripts, arsenal_templates) = ('oil', 
    'OIL', '/home/darren/Repositories/Canonical/' + 
    'arsenal/arsenal-devel/reports/OIL/OIL.json', 
    '/home/darren/Repositories/Canonical/arsenal/arsenal-devel/scripts', 
    '/home/darren/Repositories/Canonical/arsenal/arsenal-devel/web/templates')
                  
    WebAppBuilder(project, title, json_loc, arsenal_scripts, 
               arsenal_templates)

    
class WebAppBuilder(object):
    
    def __init__(self, project, title, json_loc, arsenal_scripts, 
               arsenal_templates):        
        #buginfo = self.get_launchpad_creds(json_loc, project)
        self.gen_webapp(title, json_loc, arsenal_scripts, arsenal_templates, 
                        buginfo)

    def gen_webapp(self, title, json_loc, arsenal_scripts, 
                   arsenal_templates, buginfo): 
        """
            Uses doberman.reformer to collate all of the outputs from the 
            different refinery jobs and stick them in a single output location and 
            recheck the error against the bugs database. 
            Then uses the output from run_arsenal to display the following:
                - Make a new filter for jobs and list them by number of hits
                - Have a date range or some choices (i.e. so you could have today, 
                    yesterday, last week, last month, last year, all time, etc) in 
                    the options
                - So we'd have a list of bugs ordered by number encountered in the 
                    given time period, separated into 'pipeline_deploy', 
                    'pipeline_prepare', and 'test_tempest_smoke'. One for PS and 
                    one for staging.
                - Show what we are currently testing and whether a job failed or 
                    passed. In other words, be able to just show, say, VNX with a 
                    list of pipelines that succeeded.
                - Include charts at the bottom (generated by running charter on 
                    the output of reformer, as this should be exactly the same 
                    format as the output of refinery).
                - It would be static and regenerated in the same way as the arsenal 
                    pages are now, so once I get around to sorting that cron job 
                    out they can both do the same.
            
            
            Using the same LP OIL.json/bugs, I need to do one for staging and one 
            for PS. Run this cron job on there and copy to the MAAS server then.
        """
        

        pass
        # import pdb; pdb.set_trace()
        # json_loc (OIL.json) and the output of reformer (which will be scp'd
        # over from a jenkins job) have everything we need, so we DO NOT need 
        # to write a new reporter, only a new mako template (althoughb feel 
        # free to add to the existing reporter).
        
        '''
            webapp to import in data                 
                - affected pipelines
                - job(s)
                - bug number
                - tags
                - time 
                - the other info arsenal cares about (Summary, Importance, 
                    Status, Assignee, Owner, Created)
                - states
                - machines
                - units
                - vendors
                - charms
                - slaves
                - ports
                - xunit name/class (optional?)
                - target file and/or regexp
                - bootstrap_node jenkins (e.g. 'Building on master'; optional?)
                - openstack release 
                
            Then keep only this info in a json file and leaving the rest to be 
            overwritten...
        '''
        
        
            
    
if __name__ == "__main__":
    sys.exit(main())
    

    
